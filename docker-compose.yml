version: '3.8'

services:
  # PostgreSQL数据库 - 用于存储结构化数据
  postgres:
    image: postgres:16-alpine
    container_name: ai_lemo_postgres
    environment:
      POSTGRES_DB: ai_lemo_qa
      POSTGRES_USER: lemo_user
      POSTGRES_PASSWORD: lemo_password_2024
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ai_lemo_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lemo_user -d ai_lemo_qa"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis缓存 - 用于会话存储和热点数据缓存
  redis:
    image: redis:7-alpine
    container_name: ai_lemo_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ai_lemo_network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis_password_2024
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Etcd - Milvus依赖的元数据存储
  etcd:
    image: quay.io/coreos/etcd:v3.5.5
    container_name: ai_lemo_etcd
    environment:
      ETCD_AUTO_COMPACTION_MODE: revision
      ETCD_AUTO_COMPACTION_RETENTION: 1000
      ETCD_QUOTA_BACKEND_BYTES: 4294967296
      ETCD_SNAPSHOT_COUNT: 50000
    volumes:
      - etcd_data:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    ports:
      - "2379:2379"
    networks:
      - ai_lemo_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3

  # MinIO - Milvus依赖的对象存储
  minio:
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    container_name: ai_lemo_minio
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    volumes:
      - minio_data:/minio_data
    command: minio server /minio_data --console-address ":9001"
    ports:
      - "9000:9000"
      - "8001:9001"
    networks:
      - ai_lemo_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Milvus单机版 - 向量数据库
  milvus:
    image: milvusdb/milvus:v2.4.15
    container_name: ai_lemo_milvus
    command: ["milvus", "run", "standalone"]
    security_opt:
      - seccomp:unconfined
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    volumes:
      - milvus_data:/var/lib/milvus
    ports:
      - "19530:19530"
      - "9091:9091"
    networks:
      - ai_lemo_network
    depends_on:
      - etcd
      - minio
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3

  # Attu - Milvus的Web管理界面（可选）
  attu:
    image: zilliz/attu:v2.4
    container_name: ai_lemo_attu
    environment:
      MILVUS_URL: milvus:19530
    ports:
      - "8000:3000"
    networks:
      - ai_lemo_network
    depends_on:
      - milvus
    restart: unless-stopped

  # SearXNG - 开源元搜索引擎（可选）
  searxng:
    image: searxng/searxng:latest
    container_name: ai_lemo_searxng
    ports:
      - "8888:8080"
    volumes:
      - ./config/searxng:/etc/searxng
    environment:
      - SEARXNG_BASE_URL=http://localhost:8888/
    networks:
      - ai_lemo_network
    restart: unless-stopped
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "1"

networks:
  ai_lemo_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  etcd_data:
    driver: local
  minio_data:
    driver: local
  milvus_data:
    driver: local

